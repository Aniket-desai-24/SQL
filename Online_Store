-- Create the database
CREATE DATABASE online_store;

-- Use the database
USE online_store;

-- Create the table for products
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the table for orders
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    customer_phone VARCHAR(20) NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the table for order items
CREATE TABLE order_items (
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    PRIMARY KEY (order_id, product_id)
);

-- Insert data into the products table
INSERT INTO products (product_id, name, category, price, description)
VALUES
    (1, 'Saree', 'Clothing', 2500, 'Traditional Indian clothing for women.'),
    (2, 'Kurta', 'Clothing', 1500, 'Traditional Indian clothing for men.'),
    (3, 'Chappal', 'Footwear', 500, 'Traditional Indian footwear for men.'),
    (4, 'Sari', 'Clothing', 3000, 'Traditional Indian clothing for women.'),
    (5, 'Lehenga', 'Clothing', 5000, 'Traditional Indian clothing for women.'),
    (6, 'Salwar Kameez', 'Clothing', 2000, 'Traditional Indian clothing for women.'),
    (7, 'Jutti', 'Footwear', 1000, 'Traditional Indian footwear for women.');

-- Insert data into the orders table
INSERT INTO orders (order_id, customer_name, customer_email, customer_phone, order_date, total_amount)
VALUES
    (1, 'Rajesh Kumar', 'rajesh.kumar@example.com', '9876543210', '2022-04-01', 5000),
    (2, 'Priya Singh', 'priya.singh@example.com', '9876543211', '2022-04-02', 2500),
    (3, 'Suresh Sharma', 'suresh.sharma@example.com', '9876543212', '2022-04-03', 1500),
    (4, 'Aarti Gupta', 'aarti.gupta@example.com', '9876543213', '2022-04-04', 8000),
    (5, 'Naveen Kumar', 'naveen.kumar@example.com', '9876543214', '2022-04-05', 3000),
    (6, 'Anjali Singh', 'anjali.singh@example.com', '9876543215', '2022-04-06', 2500);


-- Insert data into the order_items table
INSERT INTO order_items (order_id, product_id, quantity, price)
VALUES
    (1, 1, 2, 5000),
    (2, 2, 1, 1500),
    (3, 3, 1, 500),
    (4, 4, 2, 6000),
    (4, 5, 1, 5000),
    (5, 6, 1, 2000),
    (6, 7, 1, 1000),
    (6, 1, 1, 2500);




--Perform Queries
--Here are some queries you can perform on the database:

--Query 1: Get the list of products and their prices

SELECT name, price FROM products;

--Query 2: Get the total revenue generated by the online store

SELECT SUM(total_amount) FROM orders;


--Query 3: Get the most popular product categories

SELECT category, COUNT(*) as num_products 
FROM products 
GROUP BY category 
ORDER BY num_products DESC;


--Query 4: Get the top 5 customers by order amount

SELECT customer_name, total_amount 
FROM orders 
ORDER BY total_amount DESC 
LIMIT 5;


--Query 5: Get the list of customers who ordered the same product more than once

SELECT customer_name, product_id, COUNT(*) as num_orders 
FROM orders 
JOIN order_items ON orders.order_id = order_items.order_id 
GROUP BY customer_name, product_id 
HAVING num_orders > 1;


--Query 6: Get the average order value by day of the week

SELECT DAYNAME(order_date) as day_of_week, AVG(total_amount) as avg_order_value 
FROM orders 
GROUP BY day_of_week;


--Query 7: Get the list of products ordered by a particular customer

SELECT products.name, order_items.quantity 
FROM order_items 
JOIN products ON order_items.product_id = products.product_id 
JOIN orders ON order_items.order_id = orders.order_id 
WHERE orders.customer_name = 'Rajesh Kumar';


--Query 8: Get the list of orders that contain a particular product

SELECT orders.order_id, orders.customer_name, products.name, order_items.quantity 
FROM order_items 
JOIN products ON order_items.product_id = products.product_id 
JOIN orders ON order_items.order_id = orders.order_id 
WHERE products.name = 'Kurta';
